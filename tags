!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Children	/home/mac/Documents/code/random_forest/src/tree.rs	/^pub struct Children<'a, T> { node: &'a Node<'a, T> }$/;"	s
Descendents	/home/mac/Documents/code/random_forest/src/tree.rs	/^pub struct Descendents { nodes: Vec<NodeId>, ptr: usize }$/;"	s
Item	/home/mac/Documents/code/random_forest/src/tree.rs	/^    type Item = NodeId;$/;"	T
Node	/home/mac/Documents/code/random_forest/src/tree.rs	/^pub struct Node<'a, T> {$/;"	s
NodeId	/home/mac/Documents/code/random_forest/src/tree.rs	/^pub struct NodeId(usize);$/;"	s
Siblings	/home/mac/Documents/code/random_forest/src/tree.rs	/^pub struct Siblings<'a, T> { node: &'a Node<'a, T> }$/;"	s
Tree	/home/mac/Documents/code/random_forest/src/tree.rs	/^pub struct Tree<'a, T> {$/;"	s
append	/home/mac/Documents/code/random_forest/src/tree.rs	/^    pub fn append(&'a mut self, data: T) {$/;"	f
aux	/home/mac/Documents/code/random_forest/src/tree.rs	/^        fn aux<'a, T>(node: &'a Node<'a, T>, acc: &mut Vec<NodeId>) {$/;"	f
children	/home/mac/Documents/code/random_forest/src/tree.rs	/^    pub fn children(&'a self) -> Children<'a, T> { Children { node: self } }$/;"	f
descendents	/home/mac/Documents/code/random_forest/src/tree.rs	/^    pub fn descendents(&'a self) -> Descendents {$/;"	f
get	/home/mac/Documents/code/random_forest/src/tree.rs	/^    pub fn get(&'a self, indx: NodeId) -> Option<&'a Node<'a, T>> {$/;"	f
get_mut	/home/mac/Documents/code/random_forest/src/tree.rs	/^    pub fn get_mut(&'a mut self, indx: NodeId) -> Option<&'a mut Node<'a, T>> {$/;"	f
inc	/home/mac/Documents/code/random_forest/src/tree.rs	/^    fn inc(&mut self) { *self = NodeId(self.0 + 1) }$/;"	f
next	/home/mac/Documents/code/random_forest/src/tree.rs	/^    fn next(&mut self) -> Option<NodeId> {$/;"	f
remove	/home/mac/Documents/code/random_forest/src/tree.rs	/^    pub fn remove(&'a mut self, indx: NodeId) {$/;"	f
remove_descendents	/home/mac/Documents/code/random_forest/src/tree.rs	/^    pub fn remove_descendents(&mut self) {$/;"	f
set	/home/mac/Documents/code/random_forest/src/tree.rs	/^    pub fn set(&'a mut self, indx: NodeId, node: Node<'a, T>) {$/;"	f
shrink_to_fit	/home/mac/Documents/code/random_forest/src/tree.rs	/^    pub fn shrink_to_fit(&'a mut self) { self.arena.shrink_to_fit() }$/;"	f
siblings	/home/mac/Documents/code/random_forest/src/tree.rs	/^    pub fn siblings(&'a self) -> Siblings<'a, T> { Siblings { node: self } }$/;"	f
